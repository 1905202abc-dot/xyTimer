name: Build GalaxyTimer Executable

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      SALT_VALUE: ${{ secrets.OBFUSCATION_SALT }}  # 从 Secrets 获取盐值

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PySide6 pycryptodome
        # 修复的 requirements.txt 检查语法
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Create PySide6 hook
      run: |
        mkdir hooks
        # 使用 PowerShell 语法创建 hook 文件
        @"
from PyInstaller.utils.hooks import collect_data_files, collect_submodules

datas = collect_data_files('PySide6')
hiddenimports = collect_submodules('PySide6')
"@ | Out-File -Encoding utf8 hooks/hook-PySide6.py

    - name: Run Pack Script with obfuscation
      run: |
        # 确保输出目录存在
        if (-not (Test-Path dist)) { mkdir dist }
        
        # 使用混淆和加盐打包
        pyinstaller --onefile --name=GalaxyTimer `
                    --distpath=dist `
                    --workpath=build `
                    --additional-hooks-dir=hooks `
                    --key $env:SALT_VALUE `  # 使用盐值进行混淆
                    pyscript/main.py
        
        # 检查生成的文件
        if (Test-Path dist\GalaxyTimer.exe) {
            Write-Host "Executable created successfully"
        } else {
            Write-Host "Error: Executable not found"
            exit 1
        }

    - name: Debug - List files
      run: |
        Write-Host "Current directory:"
        Get-ChildItem
        Write-Host "Dist directory contents:"
        if (Test-Path dist) { Get-ChildItem dist }

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: galaxy-timer
        path: dist/GalaxyTimer.exe  # 明确指定文件路径
